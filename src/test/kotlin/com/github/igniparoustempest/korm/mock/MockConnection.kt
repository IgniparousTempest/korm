package com.github.igniparoustempest.korm.mock

import io.mockk.mockk
import java.sql.Blob
import java.sql.CallableStatement
import java.sql.Clob
import java.sql.Connection
import java.sql.DatabaseMetaData
import java.sql.NClob
import java.sql.PreparedStatement
import java.sql.SQLWarning
import java.sql.SQLXML
import java.sql.Savepoint
import java.sql.Statement
import java.sql.Struct
import java.util.Properties
import java.util.concurrent.Executor

class MockConnection: Connection {
    val statement = mockk<Statement>(relaxed = true)
    private val preparedStatement = mockk<PreparedStatement>(relaxed = true)

    override fun prepareStatement(sql: String?): PreparedStatement {
        return preparedStatement
    }

    override fun prepareStatement(sql: String?, resultSetType: Int, resultSetConcurrency: Int): PreparedStatement {
        return preparedStatement
    }

    override fun prepareStatement(sql: String?, resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): PreparedStatement {
        return preparedStatement
    }

    override fun prepareStatement(sql: String?, autoGeneratedKeys: Int): PreparedStatement {
        return preparedStatement
    }

    override fun prepareStatement(sql: String?, columnIndexes: IntArray?): PreparedStatement {
        return preparedStatement
    }

    override fun prepareStatement(sql: String?, columnNames: Array<out String>?): PreparedStatement {
        return preparedStatement
    }

    override fun rollback() {
        TODO("not implemented")
    }

    override fun rollback(savepoint: Savepoint?) {
        TODO("not implemented")
    }

    override fun getHoldability(): Int {
        TODO("not implemented")
    }

    override fun setNetworkTimeout(executor: Executor?, milliseconds: Int) {
        TODO("not implemented")
    }

    override fun commit() {
        TODO("not implemented")
    }

    override fun <T : Any?> unwrap(iface: Class<T>?): T {
        TODO("not implemented")
    }

    override fun setTransactionIsolation(level: Int) {
        TODO("not implemented")
    }

    override fun setAutoCommit(autoCommit: Boolean) {
        TODO("not implemented")
    }

    override fun abort(executor: Executor?) {
        TODO("not implemented")
    }

    override fun prepareCall(sql: String?): CallableStatement {
        TODO("not implemented")
    }

    override fun prepareCall(sql: String?, resultSetType: Int, resultSetConcurrency: Int): CallableStatement {
        TODO("not implemented")
    }

    override fun prepareCall(sql: String?, resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): CallableStatement {
        TODO("not implemented")
    }

    override fun getClientInfo(name: String?): String {
        TODO("not implemented")
    }

    override fun getClientInfo(): Properties {
        TODO("not implemented")
    }

    override fun getAutoCommit(): Boolean {
        TODO("not implemented")
    }

    override fun setCatalog(catalog: String?) {
        TODO("not implemented")
    }

    override fun getWarnings(): SQLWarning {
        TODO("not implemented")
    }

    override fun getCatalog(): String {
        TODO("not implemented")
    }

    override fun setHoldability(holdability: Int) {
        TODO("not implemented")
    }

    override fun getSchema(): String {
        TODO("not implemented")
    }

    override fun isValid(timeout: Int): Boolean {
        TODO("not implemented")
    }

    override fun close() {
        TODO("not implemented")
    }

    override fun isClosed(): Boolean {
        TODO("not implemented")
    }

    override fun createNClob(): NClob {
        TODO("not implemented")
    }

    override fun createBlob(): Blob {
        TODO("not implemented")
    }

    override fun createArrayOf(typeName: String?, elements: Array<out Any>?): java.sql.Array {
        TODO("not implemented")
    }

    override fun setReadOnly(readOnly: Boolean) {
        TODO("not implemented")
    }

    override fun isWrapperFor(iface: Class<*>?): Boolean {
        TODO("not implemented")
    }

    override fun nativeSQL(sql: String?): String {
        TODO("not implemented")
    }

    override fun createStruct(typeName: String?, attributes: Array<out Any>?): Struct {
        TODO("not implemented")
    }

    override fun setClientInfo(name: String?, value: String?) {
        TODO("not implemented")
    }

    override fun setClientInfo(properties: Properties?) {
        TODO("not implemented")
    }

    override fun releaseSavepoint(savepoint: Savepoint?) {
        TODO("not implemented")
    }

    override fun createClob(): Clob {
        TODO("not implemented")
    }

    override fun isReadOnly(): Boolean {
        TODO("not implemented")
    }

    override fun createStatement(): Statement {
        return statement
    }

    override fun createStatement(resultSetType: Int, resultSetConcurrency: Int): Statement {
        return statement
    }

    override fun createStatement(resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): Statement {
        return statement
    }

    override fun setSavepoint(): Savepoint {
        TODO("not implemented")
    }

    override fun setSavepoint(name: String?): Savepoint {
        TODO("not implemented")
    }

    override fun getTypeMap(): MutableMap<String, Class<*>> {
        TODO("not implemented")
    }

    override fun clearWarnings() {
        TODO("not implemented")
    }

    override fun getMetaData(): DatabaseMetaData {
        TODO("not implemented")
    }

    override fun getTransactionIsolation(): Int {
        TODO("not implemented")
    }

    override fun setSchema(schema: String?) {
        TODO("not implemented")
    }

    override fun getNetworkTimeout(): Int {
        TODO("not implemented")
    }

    override fun setTypeMap(map: MutableMap<String, Class<*>>?) {
        TODO("not implemented")
    }

    override fun createSQLXML(): SQLXML {
        TODO("not implemented")
    }


}